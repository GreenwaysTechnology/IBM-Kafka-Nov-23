		   Event Driven Architecture and Kafka
.....................................................................................
Learning Track:
...............

1.Introduction to kafka 
2.Kafka Architecture
3.Kafka Programming using cli
4.Producers and Consumers
5.Kafka Connect
6.Kafka Streams using KsqlDB

Note: we dont use any programming language to connect to produce and consume kafka messages.
.....................................................................................
			Apache Kafka
.....................................................................................

Before Kafka:

Distributed Applications and Data transfer
..........................................

Application(software system) Develpment patterns:
.................................................

Network based Applications - Distributed Application


Application has layers:

1.User interface layer
2.Application biz layer
3.Data Layer /Repository layer
  3.1.Integration layer


Architecture of Distributed Application

1.Mainframework based distributed
   1.Application biz layer
   2.Data Layer /Repository layer
 Where as User interface layer is kept in dump terminals connected to mainframworks.

Drawbacks:
1.Too costly
2.scalability is too difficult.

Advantage:
1.High security
2.Centeralized management.


2.Client Server Architecture

2.1.Main framework based client -server , where as mainframe acts as server and digital computers act as clients.
 
2.2.Digital computer based client - server architechture
   Servers and clients are digital computers


Based on this we can classify the applications  layered /tiered concept

1.single tier/layer
   client,server,database every is kept in one single machine...
2.two tier/layer
  user interface is kept in client machine,
  data logic and biz logic is kept in server machine
 both machines are connected via networks

          "This arch based on LAN /WAN"

3.three tier /layer

 This arch based on "internet network" and web computing

   client - client machine
   server - biz logic is kept inside another machine
   database - is kept inside another machine

 Client is browser
 Server BIZ logic is kept as "web Applications"
 Database is accessed by "Server side technologies - J2EE,ASP/.net,PHP,....

4.N-tier / layer

 Client is browser
 Server BIZ logic is kept as "web Applications"
   -Again spilt into multi layered
 Database is accessed by "Server side technologies - J2EE,ASP/.net,PHP,....
.....................................................................................
			Sharing data among layers
....................................................................................
Data is every thing..

Every Enterprise is powered by data.

We take information in, analyze it, manipulate it and creates more as output.

Every application creates data, whether it is log messages,metrics,user activity,out going messages, or something else.

Every byte of data has a story to tell, something of imporatance that will inform the next thing to be done.

In order to know what that is, we need to get the data from where it is created to where it can be analyzed.

We see this every day on websites like amazon,youtube,facebook, where our "clicks" on on items of interest to use are turned into recommmendations that are shown to us litte later.

The faster we can do this, the more agile and resonsive our organizations can be.
The less effort we spend on moving data around, the more we can focus on the core business at hand.
......
....................................................................................
			Publish and Subscribe Messaging (data):
...................................................................................

Before discussing the Apache Kafka , it is imporant for us to understand the concept of pub/sub messaging and why it is important.

Pub and sub messaging is  a pattern that is characterized by the sender(publisher) of a piece of data (message) not spcificially directing to a reciver, Instead, the publisher classifies the message somewhat, and that receiver(subscriber) subscribes to receive certain of classes of messages.

Pub /Sub systems often have a broker, a central point where messages are published , to facilite this.

.....................................................................................
			  How enterprise systems handles data
			             (Pre Kafka)
....................................................................................


Many use cases for pub/sub starts with same way.

   With a simple message queue or interprocess communication channel

for eg, you create an application that needs to send montioring information somewhere. How do you send?

You write monitoring message in a direct connection from your application to an application that displays your metrics on a dashboard, push metrics over that connection.

let us say, you have systems, that system has two servers - frontend server,
back end server

	  both server sends metrics data to metrics server

		 FrontEnd                 BackEnd Server
		  Server
		    |				|
		    |				|
		--------------------------------------
				|
			    Mertics Server


If your server is running in clustered env

		FrontEnd               FrontEnd Server
		  Server
		    |				|
		    |				|
		--------------------------------------
				|
			    Mertics Server


		 Backend Server            Backend Server
		  Server
		    |				|
		    |				|
		--------------------------------------
				|
			    Mertics Server



A single , direct metric servers irresptive of how many backend and front end server

This looks a simple soultion to a problem that works when you are going to getting started with monitoring.

Before long,you decide you would like to analyze your metircs over a longer term,
that doesnot work very well in dashboard.

When you introduce new service in your biz and where you have to introduce server,
Now you have three more apps, that generating metrics data ,then metrics server need connect directly , recive,store,anaylze
..............................................................................
			Many Metrics publisher, using direct connections
.....................................................................................

 FrontEnd server  Database Server  Chat server  Mail Server PaymentServer
         |            |                |           |            |
-----------------------------------------------------------------------......
                                |
			   publish metrics
				|
			    Metric Server



Here all publisher are publishing "directly" metics to Metrics Servers.

       "What if i want to store front data ,database data,back end data separatly"

....................................................................................
			Loosly Coupled Metric publisher and Server
		         Introduction of Pub/Sub Messing System
...................................................................................

 FrontEnd server  Database Server  Chat server  Mail Server PaymentServer
         |            |                |           |            |
-----------------------------------------------------------------------
                                |
			   publish metrics
				 |
			      Metrics
			      Sub/Pub
				|
			    Metric Server

Every Pub sub system is going to store messages inside "Queue" , the basic data storage model.
In the above system we have only one /Single /Individual Queue System.

Image one of your coworkers has been doing similar work with log messages, another has been working on tracking user behavior on the frontend website and providing that information to developers who are working on machine learning,
As well as creating some reports for management.


...................................................................................
			 Multi Pub Sub Systems
...................................................................................

FrontEnd server  Database Server  Chat server  Mail Server PaymentServer 
         |            |                |           |            |
-----------------------------------------------------------------------
                                |

Metrics     Logging              Tracking
Pub/Sub     Pub/Sub              Pub/Sub
  |           |                    |
Metric    ---------             ----------       
Server    |       |                |
        Secuirty Log Search      MachingLearning 
	Analysis Server		 and AI server
         

Now at last , we have refactored our system, but there is lot of "Duplication"
Your company is maintaining multiple systems for queuing data, all of which have their own individual bugs and limitations.
You will have more systems in future it will come.

..................................................................................
....................................................................................
			Birth of Kafka :Entering into Kafka
....................................................................................	
Apache Kafka is pub/sub messaging system designed to solve the above problem.
Instead of having multiple  Queue System, we can have only one System where we receive message,organize the message,store,process,and produce the report.

Traditional Messaging Systems:
..............................

Traditional Messaging systems are built based on the standards like "AMQP" protocal.
Any pub/sub messaging product like rabbit mq is built on the standards only.


According to the AMQP Standards.
 
1.Messages are stored in a queue
2.Queue stores messages which is tranisent by default. if you want you can persit in disk.
3.The messages can be altered(update,delete)
4.The messages are deleted once it is consumed

	"Kafka was not designed based on Traditional Messaging System"
	 "Kafka was not designed based on AMQP Protocal Specification"

Kafka inspired from "Logging System" or Loggers to store messages, instead of storing message in traditional messaging systems.

 		"Kafka was designed based on  Loggers"

What is Log?
   Tracking activites of an application,store those activites in "memory or in  a disk file" in order to analyze them in furture.
	
If you are developer, you encounter loggers every day in your development cycle.

Logs gives complete information about the system which is running.


if you are java developer, you might have used various logging implementations.
We call as "Logging Frameworks"

Log gives just information about "what just happened or happing" in your system for eg
some warings,some info,some bugs, some tracking , some tracing..........

Logs :
2016-06-16 17:02:13 TRACE Trace log message
2016-06-16 17:02:13 DEBUG Debug log message
2016-06-16 17:02:13 INFO  Info log message
2016-06-16 17:02:13 ERROR Error log message

.....................................................................................
			 Log structure and its characteristics
.....................................................................................

Log information is stored in a file called "Log file" - system.log
Log file is used for future analytics such as debugging,finding warnings,errors...

What is difference between "normal files" and log files?

=>Log files are "append only", you cant add any new entry in between, which makes the file "immutable" - cant be edited or read only.

=>Normal files are based on "Edit Mode" or Replace mode
    Files are edited or replaced later.

  		"Kafka is just based on Log System"
		    Kafka is just Logger System



    Since kafka is logger system is it same as "Slf4j,log4j" Kind of loggers.

Some what yes, but Kafka is more beyond that....

	    Kafka is not based on "traditional log files" 


Kafka is fundmentally based on "Commit Logs"

What is commit log?
    "In data management platforms, a commit is making set of tenative changes permanent".
    "Making the end of a transaction and providing Durablity to ACID transactions"
  The record of commits is called "Commit log"

What Kafka is going to record into commit log?
     Kafka was designed to store informations(data).

What type of information?
  Any type of information we can store into commit log.
..........................................................................................................................................................................
			  Event
....................................................................................
What is Event?
   An Event is any type of action,incident,or change are "happening" or "just happened"
for eg:
  Now i am typing,Now i am teaching - happening
  Just i had coffee,Just i received mail, just i clicked a link, just i searched product - happened.

 "An Event is just remainder or notification of  your happenings or happened"
...................................................................................
...................................................................................
		     Event Driven Architecture(Software system)
....................................................................................

The Software system can track what is happening, just happended , stores into a file called commit log, later that commit log can be replayed to process those events to produce various reports
 			
			 FronEnd Server
				|
			  What is happening or happened
			 (User has clicked  "iphone 15 link") - event
				|
			   store userclick event into log file
				|
			     Kafka 
				|
			    events.log
				17-07-2023 3:48:59  iphone 15 link
				17-07-2023 3:49:58  dell lap top link

Let us imagine, You have mobile apps, which tracks your locations where ever you move, those locations are recorded into a file by "Event Driven System"(Kafka).
Based on those data , you can get report like that where were you at morning,afternoon,evening...

Eg:
 Today stock price is $40 at 10Am
 I met my friend yesterday at east coast road
 Made payment of $500 to Ramesh

Imgaine i need  somebody or somthing should record every activity of my life from the early moring when i get up and till bed.

  There is a system to record every events of your life that is called 
			      Kafka

	 Kafka is Event Processing Software , which stores and process events

.....................................................................................
			Kafka Basic  Architecture
.....................................................................................

How kafka has been implemented?

   "Kafka is a software"
   "Kafka is a file(Commit log file) processing software
   "Kafka is written in java and scala" - Kafka is just java application
   "In order to run Kafka we need JVM"

How event is represented into kafka?

	Event is just a message.
        Every message has its own arch.
        In Kafka the Event/Message is called as "Record".
		Event(Record)


Event Contains Two things:
..........................
1.What happened/Happing - Name of the Event
2.State - Data

State:
......
  The state is nothing but data.

State Representation:

 In General state(data) is stored in relational databases "as table"
 A table represents the state of something like 
    User - id,name,email,password,city

Since User data can be stored and proceed into tables.

Can we store events into table?
   Events also has state like things(user,customer,product) in real time.

We can but not all types of events into table.
........................................................................
.....................................................................................
			    Modern Data Modeling
.....................................................................................
     Generally domains are modeled based on "Things(Customer,Order,Payment) first"
	  Now a days People started thinking based on Events first
          Instead of storing things into database , we store events

Events also has some state like "Things"

   "Events has some description of what happened with it", but Primary idea is that          event is indication in time that thing took place".

How to store events?
   Logs - Log is structured and the sequence  of the evnets occured in the method calls.

According to Kafka Official Definition:

	"Apache Kafka is an open source distributed streaming system used for stream 	processing, real-data time pipelines, and data integration at scale"

....................................................................................
			 kafka Distribution - Kafka Setup
...................................................................................

Kafka was orginally created by "Jay kreps,Neha,Jun Rao" at Linkedin to solve the problems of distributed "Pub/Sub" Message system.

Once the Kafka was ready, Kafka Creators wanted to open source, who released the Kafka under "Apache license" early 2011.

After Kafka relase it become very popular, later Jay ,Neha ,Jun Rao started the company called "Confluent".

Confluent then took Apache Kakfa as a core and who built various production ready tools, support, cloud integration


Kafka distribution:
 Kafka is available in two distribution

1.Apache Kafka
   It is open source version of kafka 

2.Confluent Kafka
   It is abstraction of apache kafka, Commericial version of apache kafka


Apache kafka vs confluent kafka
https://www.confluent.io/apache-kafka-vs-confluent/


Platforms:

Kafka can be installed any platform

1.Bare metal machines
  Kafka is available for all operating system.

1.Windows - may be good for basic use cases
2.Linux - recommended for advanced use cases
3.mac - recommended for advanced use cases

2.VM env
  You  can setup kafka on any industry standard VMS - oracle virtual box

3.Container based distributed: - docker and kubernetes
   It is recommened in development env and also can be used in prod


We are going to setup:

Apache Kafka | confluent Kafka
1.Linux - bare metal machine
2.Docker - Container

Lab setup:

1.setup linux:
..............

Linux: Ubuntu 20.x

Lab setup:

1.setup linux:
..............

Linux: Ubuntu 20.x

sudo apt get-update

sudo apt get-upgrade

1.java 

jdk 11.

sudo apt install openjdk-11-jdk -y


2.Windows terminal software 
   For lanuching linux in multiple tables in single windows

How to install? 
  windows store - windows termainl
....................................................................................

Setting up Kafka:


1.Apache Kafka -https://kafka.apache.org/
  =>Source distribution
	-you can build from the source
  =>Binary distribution
        -you can download already built folder

https://downloads.apache.org/kafka
https://archive.apache.org/dist/kafka

wget https://downloads.apache.org/kafka/3.6.0/kafka_2.12-3.6.0.tgz

2.Extract the folder.

tar -xzf kafka_2.12-3.6.0.tgz

.....................................................................................
			   Exploring files and folders
.....................................................................................
subu@LAPTOP-R2TGGFDL:~$ cd kafka_2.12-3.6.0/
subu@LAPTOP-R2TGGFDL:~/kafka_2.12-3.6.0$ ls -l
total 72
-rw-r--r-- 1 subu subu 14973 Sep 29 10:26 LICENSE
-rw-r--r-- 1 subu subu 28184 Sep 29 10:26 NOTICE
drwxr-xr-x 3 subu subu  4096 Sep 29 10:30 bin
drwxr-xr-x 3 subu subu  4096 Sep 29 10:30 config
drwxr-xr-x 2 subu subu 12288 Nov 14 14:26 libs
drwxr-xr-x 2 subu subu  4096 Sep 29 10:30 licenses
drwxr-xr-x 2 subu subu  4096 Sep 29 10:30 site-docs

Folders:
 lib
   contains all jar files necessary to run kafka
 bin
   contains the shell script files to run kakfka, contains windows subfolder which contains windows script.
/kafka_2.12-3.6.0/bin/windows

config:
 Contains all configurations in order to run kafka server.
...................................................................................
			  Core concepts of Kafka
....................................................................................

Broker:
  Since kafka is a java program which is deployed on JVM, Kafka runs on the JVM which is process.
  In kafka context the JVM is called as "Kafka Broker or Kafka Server"

Kafka has been designed based on "distributed arch" -  By default kafka is distributed.

General Characteristics of Distributed architecture:
....................................................

1.Scalablity:
  Running more than one process, hosting the same app, Running the same app on multiple servers.

Cluster:
   When we scale apps into multiple servers, we neeed to group them under a single unit. Group of machines are called as "Cluster".

2.High Avaiablity:
  If any one server fails in the cluster, clients should not be affected, we need to make our app always available

How to make highly available? 
 via cluster.
In kafka we can run "multiple broker"  as a cluster.

Kafka clusters can be in the same machine or across network, or we can we many clusters too.
.....................................................................................
			  Cluster and Distributed architecture
.....................................................................................

1.Cluster Manager: 
     Control Panel where cluster information is stored
2.Broker
     Data plane Where the user data/events are stored
.....................................................................................
			 Cluster Manager

In any distribtued arch, if machines are running in a cluster or clusters, the cluster need to be managed.

Who can manage cluster?
  Cluster Manager

Kafka and Cluster Manager:
 Kafka is distribtued , runs in  a cluster, we need to manage that cluster.

Kafka provides cluster:
=>Zookeeper: It is distribtued cluster manager software.
=>KRaft : It is new Cluster manager inside Kafka cluster.


		"
		   If you are running single broker or multiple brokers
                        we need to have cluster manager
		"

Roles of Cluster Manager:

1.To manage cluster meta data
2.Failures dectections and recovery
3.Storing ACL and secrets
.....................................................................................

Lab 2: How to setup Apache kafka cluster?
..........................................

Single Broker
Single zookeeper

Step 1:
 Start zookeeper

Note:
 Before start any thing, we need to pass "respective configuration files" as a parameter.

config$ ls
 ls -l
total 76
-rw-r--r-- 1 subu subu  906 Sep 29 10:26 connect-console-sink.properties
-rw-r--r-- 1 subu subu  909 Sep 29 10:26 connect-console-source.properties
-rw-r--r-- 1 subu subu 5475 Sep 29 10:26 connect-distributed.properties
-rw-r--r-- 1 subu subu  883 Sep 29 10:26 connect-file-sink.properties
-rw-r--r-- 1 subu subu  881 Sep 29 10:26 connect-file-source.properties
-rw-r--r-- 1 subu subu 2063 Sep 29 10:26 connect-log4j.properties
-rw-r--r-- 1 subu subu 2540 Sep 29 10:26 connect-mirror-maker.properties
-rw-r--r-- 1 subu subu 2262 Sep 29 10:26 connect-standalone.properties
-rw-r--r-- 1 subu subu 1221 Sep 29 10:26 consumer.properties
drwxr-xr-x 2 subu subu 4096 Sep 29 10:26 kraft
-rw-r--r-- 1 subu subu 4917 Sep 29 10:26 log4j.properties
-rw-r--r-- 1 subu subu 2065 Sep 29 10:26 producer.properties
-rw-r--r-- 1 subu subu 6896 Sep 29 10:26 server.properties
-rw-r--r-- 1 subu subu 1094 Sep 29 10:26 tools-log4j.properties
-rw-r--r-- 1 subu subu 1169 Sep 29 10:26 trogdor.conf
-rw-r--r-- 1 subu subu 1205 Sep 29 10:26 zookeeper.properties


zookeeper.properties:

dataDir=/tmp/zookeeper
   The directory where the snaphot of cluster information is stored.

clientPort=2181
  The clients who connects zookeeper
 The port at which client connects
  Who is client, Kafka broker is client.


Any server if you want to start we need to use "Script files"

./bin/zookeeper-server-start.sh config/zookeeper.properties

Step 2:
....... 
 After running zookeeper, we need to start kafka broker.

In order to start kafka broker we need to supply server.properties

Basic server.properties file properties:
........................................


# The id of the broker. This must be set to a unique integer for each broker.
broker.id=0

log.dirs=/tmp/kafka-logs
  Kafka is logger system , means all data is stored into log file called commit log.
log files are stored into tmp/kafka-logs.


zookeeper.connect=localhost:2181
# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.

./bin/kafka-server-start.sh config/server.properties


Note:
 Without zookeeper or kraft , we cant start broker.
.....................................................................................
			 Sending Messages(Events) to Broker
.....................................................................................	
				Topics
....................................................................................

What is Topic?
  There are lot of events, we need to organize them in the system
  Apache Kafka's most fundamental unit of organization is the topic.

 Topic is just like table in the relational database.

  As we discussed already, kafka just stores events in the log files.

  We never write events into log file directly.

  As a developer we caputure events, write them into "topic" , kafka writes into log file from the topic.

  Topic is log of events, logs are easy to undestand

 Topic is just simple data structure with well known semantics, they are append only.

 When ever we write a message, it always goes on the end.

 When you read message, from the logs, by "Seeking offset in the log".

 Logs are fundamental durable things, Traditional Messaging systems have topics and queues which stores messages temporarily to buffer them between source and designation.

 Since topics are logs, which always permenant.

 You can delete directly log files not but not messages, but you purge messages.

 You can store logs as short as to as long as years or even you can retain messages indefintely.
.....................................................................................
			    How to create topic
.....................................................................................

Actors in kafka:

1.Producer
    The producer is a program whose responsability to capture events, and send events to kafka broker.
   The Producer will publish events into topic
2.Consumer
   The consumer is a program whose responsiability to read events from the topic..


Producers and consumers can be any programming language which supports kafak integration.

Producers can be a java program,nodejs,python,c#
Consumers can be a java program,nodejs,python,c#...

Kafka supports cli tools.
.....................................................................................
			kafka-topics.sh
.....................................................................................

This is a cli tool used to create,delete,describe, or update the topic.


Explore how to use kafka tpics tool.

 ./bin/kafka-topics.sh --help
This tool helps to create, delete, describe, or change a topic.
Option                                   Description
------                                   -----------
--alter                                  Alter the number of partitions and
                                           replica assignment. Update the
                                           configuration of an existing topic
                                           via --alter is no longer supported
                                           here (the kafka-configs CLI supports
                                           altering topic configs with a --
                                           bootstrap-server option).
--at-min-isr-partitions                  if set when describing topics, only
                                           show partitions whose isr count is
                                           equal to the configured minimum.
--bootstrap-server <String: server to    REQUIRED: The Kafka server to connect
  connect to>                              to.
--command-config <String: command        Property file containing configs to be
  config property file>                    passed to Admin Client. This is used
                                           only with --bootstrap-server option
                                           for describing and altering broker
                                           configs.
--config <String: name=value>            A topic configuration override for the
                                           topic being created or altered. The
                                           following is a list of valid
                                           configurations:
                                                cleanup.policy
                                                compression.type
                                                delete.retention.ms
                                                file.delete.delay.ms
                                                flush.messages
                                                flush.ms
                                                follower.replication.throttled.
                                           replicas
                                                index.interval.bytes
                                                leader.replication.throttled.replicas
                                                local.retention.bytes
                                                local.retention.ms
                                                max.compaction.lag.ms
                                                max.message.bytes
                                                message.downconversion.enable
                                                message.format.version
                                                message.timestamp.after.max.ms
                                                message.timestamp.before.max.ms
                                                message.timestamp.difference.max.ms
                                                message.timestamp.type
                                                min.cleanable.dirty.ratio
                                                min.compaction.lag.ms
                                                min.insync.replicas
                                                preallocate
                                                remote.storage.enable
                                                retention.bytes
                                                retention.ms
                                                segment.bytes
                                                segment.index.bytes
                                                segment.jitter.ms
                                                segment.ms
                                                unclean.leader.election.enable
                                         See the Kafka documentation for full
                                           details on the topic configs. It is
                                           supported only in combination with --
                                           create if --bootstrap-server option
                                           is used (the kafka-configs CLI
                                           supports altering topic configs with
                                           a --bootstrap-server option).
--create                                 Create a new topic.
--delete                                 Delete a topic
--delete-config <String: name>           A topic configuration override to be
                                           removed for an existing topic (see
                                           the list of configurations under the
                                           --config option). Not supported with
                                           the --bootstrap-server option.
--describe                               List details for the given topics.
--exclude-internal                       exclude internal topics when running
                                           list or describe command. The
                                           internal topics will be listed by
                                           default
--help                                   Print usage information.
--if-exists                              if set when altering or deleting or
                                           describing topics, the action will
                                           only execute if the topic exists.
--if-not-exists                          if set when creating topics, the
                                           action will only execute if the
                                           topic does not already exist.
--list                                   List all available topics.
--partitions <Integer: # of partitions>  The number of partitions for the topic
                                           being created or altered (WARNING:
                                           If partitions are increased for a
                                           topic that has a key, the partition
                                           logic or ordering of the messages
                                           will be affected). If not supplied
                                           for create, defaults to the cluster
                                           default.
--replica-assignment <String:            A list of manual partition-to-broker
  broker_id_for_part1_replica1 :           assignments for the topic being
  broker_id_for_part1_replica2 ,           created or altered.
  broker_id_for_part2_replica1 :
  broker_id_for_part2_replica2 , ...>
--replication-factor <Integer:           The replication factor for each
  replication factor>                      partition in the topic being
                                           created. If not supplied, defaults
                                           to the cluster default.
--topic <String: topic>                  The topic to create, alter, describe
                                           or delete. It also accepts a regular
                                           expression, except for --create
                                           option. Put topic name in double
                                           quotes and use the '\' prefix to
                                           escape regular expression symbols; e.
                                           g. "test\.topic".
--topic-id <String: topic-id>            The topic-id to describe.This is used
                                           only with --bootstrap-server option
                                           for describing topics.
--topics-with-overrides                  if set when describing topics, only
                                           show topics that have overridden
                                           configs
--unavailable-partitions                 if set when describing topics, only
                                           show partitions whose leader is not
                                           available
--under-min-isr-partitions               if set when describing topics, only
                                           show partitions whose isr count is
                                           less than the configured minimum.
--under-replicated-partitions            if set when describing topics, only
                                           show under replicated partitions
--version                                Display Kafka version.


Lab 3: How to create topic?

./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic todos-topic
Created topic todos-topic.

After creating topic you can explore, log file location.

/tmp/kafka-logs/
      |
      todos-topic-0

 When you create topic, which is represented inside disk as "folder" 

todos-topic-0
   |        |
topicName  partition id
..................................................................................... 
		    How to describe/look at the structure of topic
.....................................................................................

--describe --topic todos-topic

./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic todos-topic

Topic: todos-topic      TopicId: EZUOtzruROmOe03We-kXdg PartitionCount: 1       ReplicationFactor: 1
Configs:
  Topic: todos-topic      Partition: 0    Leader: 0       Replicas: 0     Isr: 0

....................................................................................
		          How to delete topic

--delete --topic todos-topics

/bin/kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic todos-topic

After delete command is executed,

Kafka will rename the topic , that means it marks for deletion.
Kafka will not delete, immediatly,
It takes few ms to delete.
....................................................................................
		       How to list topics
.....................................................................................
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --list
todos-topic

Note: 
Kafka maintains internal topics, topics which are created by kafka for various use cases.

 ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --list --exclude-internal
todos-topic

You can filter topics listing by using many other options.

for eg:
 ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --list --exclude-internal --unavailable-partitions
.....................................................................................
	 How to publish message or events/records into Kafka Topic
....................................................................................

In order to publish message/event/record , we need publisher /producer who can be any program, we are going to use cli to publish message.

kafka-console-producer.sh
./bin/kafka-console-producer.sh --help
This tool helps to read data from standard input and publish it to Kafka.
Option                                   Description
------                                   -----------
--batch-size <Integer: size>             Number of messages to send in a single
                                           batch if they are not being sent
                                           synchronously. please note that this
                                           option will be replaced if max-
                                           partition-memory-bytes is also set
                                           (default: 16384)
--bootstrap-server <String: server to    REQUIRED unless --broker-list
  connect to>                              (deprecated) is specified. The server
                                           (s) to connect to. The broker list
                                           string in the form HOST1:PORT1,HOST2:
                                           PORT2.
--broker-list <String: broker-list>      DEPRECATED, use --bootstrap-server
                                           instead; ignored if --bootstrap-
                                           server is specified.  The broker
                                           list string in the form HOST1:PORT1,
                                           HOST2:PORT2.
--compression-codec [String:             The compression codec: either 'none',
  compression-codec]                       'gzip', 'snappy', 'lz4', or 'zstd'.
                                           If specified without value, then it
                                           defaults to 'gzip'
--help                                   Print usage information.
--line-reader <String: reader_class>     The class name of the class to use for
                                           reading lines from standard in. By
                                           default each line is read as a
                                           separate message. (default: kafka.
                                           tools.
                                           ConsoleProducer$LineMessageReader)
--max-block-ms <Long: max block on       The max time that the producer will
  send>                                    block for during a send request.
                                           (default: 60000)
--max-memory-bytes <Long: total memory   The total memory used by the producer
  in bytes>                                to buffer records waiting to be sent
                                           to the server. This is the option to
                                           control `buffer.memory` in producer
                                           configs. (default: 33554432)
--max-partition-memory-bytes <Integer:   The buffer size allocated for a
  memory in bytes per partition>           partition. When records are received
                                           which are smaller than this size the
                                           producer will attempt to
                                           optimistically group them together
                                           until this size is reached. This is
                                           the option to control `batch.size`
                                           in producer configs. (default: 16384)
--message-send-max-retries <Integer>     Brokers can fail receiving the message
                                           for multiple reasons, and being
                                           unavailable transiently is just one
                                           of them. This property specifies the
                                           number of retries before the
                                           producer give up and drop this
                                           message. This is the option to
                                           control `retries` in producer
                                           configs. (default: 3)
--metadata-expiry-ms <Long: metadata     The period of time in milliseconds
  expiration interval>                     after which we force a refresh of
                                           metadata even if we haven't seen any
                                           leadership changes. This is the
                                           option to control `metadata.max.age.
                                           ms` in producer configs. (default:
                                           300000)
--producer-property <String:             A mechanism to pass user-defined
  producer_prop>                           properties in the form key=value to
                                           the producer.
--producer.config <String: config file>  Producer config properties file. Note
                                           that [producer-property] takes
                                           precedence over this config.
--property <String: prop>                A mechanism to pass user-defined
                                           properties in the form key=value to
                                           the message reader. This allows
                                           custom configuration for a user-
                                           defined message reader.
                                         Default properties include:
                                          parse.key=false
                                          parse.headers=false
                                          ignore.error=false
                                          key.separator=\t
                                          headers.delimiter=\t
                                          headers.separator=,
                                          headers.key.separator=:
                                          null.marker=   When set, any fields
                                           (key, value and headers) equal to
                                           this will be replaced by null
                                         Default parsing pattern when:
                                          parse.headers=true and parse.key=true:
                                           "h1:v1,h2:v2...\tkey\tvalue"
                                          parse.key=true:
                                           "key\tvalue"
                                          parse.headers=true:
                                           "h1:v1,h2:v2...\tvalue"
--reader-config <String: config file>    Config properties file for the message
                                           reader. Note that [property] takes
                                           precedence over this config.
--request-required-acks <String:         The required `acks` of the producer
  request required acks>                   requests (default: -1)
--request-timeout-ms <Integer: request   The ack timeout of the producer
  timeout ms>                              requests. Value must be non-negative
                                           and non-zero. (default: 1500)
--retry-backoff-ms <Long>                Before each retry, the producer
                                           refreshes the metadata of relevant
                                           topics. Since leader election takes
                                           a bit of time, this property
                                           specifies the amount of time that
                                           the producer waits before refreshing
                                           the metadata. This is the option to
                                           control `retry.backoff.ms` in
                                           producer configs. (default: 100)
--socket-buffer-size <Integer: size>     The size of the tcp RECV size. This is
                                           the option to control `send.buffer.
                                           bytes` in producer configs.
                                           (default: 102400)
--sync                                   If set message send requests to the
                                           brokers are synchronously, one at a
                                           time as they arrive.
--timeout <Long: timeout_ms>             If set and the producer is running in
                                           asynchronous mode, this gives the
                                           maximum amount of time a message
                                           will queue awaiting sufficient batch
                                           size. The value is given in ms. This
                                           is the option to control `linger.ms`
                                           in producer configs. (default: 1000)
--topic <String: topic>                  REQUIRED: The topic id to produce
                                           messages to.

.....................................................................................

How to publish events into topic?
./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic todos-topic
>Learn Kafka
>Learn Event Driven Architecture
>Learn kafka streams
>Learn Kafka connectors
.....................................................................................
			Consumers
.....................................................................................

Consumers are going to read data from the topics.

Steps:
=>Find a topic name eg todos-topic
=>Find a host name and port eg localhost:9092
=>if you read future message(Current message being published)
=>if you want to read histical message, from the begining...

./bin/kafka-console-consumer.sh --help
This tool helps to read data from Kafka topics and outputs it to standard output.
Option                                   Description
------                                   -----------
--bootstrap-server <String: server to    REQUIRED: The server(s) to connect to.
  connect to>
--consumer-property <String:             A mechanism to pass user-defined
  consumer_prop>                           properties in the form key=value to
                                           the consumer.
--consumer.config <String: config file>  Consumer config properties file. Note
                                           that [consumer-property] takes
                                           precedence over this config.
--enable-systest-events                  Log lifecycle events of the consumer
                                           in addition to logging consumed
                                           messages. (This is specific for
                                           system tests.)
--formatter <String: class>              The name of a class to use for
                                           formatting kafka messages for
                                           display. (default: kafka.tools.
                                           DefaultMessageFormatter)
--formatter-config <String: config       Config properties file to initialize
  file>                                    the message formatter. Note that
                                           [property] takes precedence over
                                           this config.
--from-beginning                         If the consumer does not already have
                                           an established offset to consume
                                           from, start with the earliest
                                           message present in the log rather
                                           than the latest message.
--group <String: consumer group id>      The consumer group id of the consumer.
--help                                   Print usage information.
--include <String: Java regex (String)>  Regular expression specifying list of
                                           topics to include for consumption.
--isolation-level <String>               Set to read_committed in order to
                                           filter out transactional messages
                                           which are not committed. Set to
                                           read_uncommitted to read all
                                           messages. (default: read_uncommitted)
--key-deserializer <String:
  deserializer for key>
--max-messages <Integer: num_messages>   The maximum number of messages to
                                           consume before exiting. If not set,
                                           consumption is continual.
--offset <String: consume offset>        The offset to consume from (a non-
                                           negative number), or 'earliest'
                                           which means from beginning, or
                                           'latest' which means from end
                                           (default: latest)
--partition <Integer: partition>         The partition to consume from.
                                           Consumption starts from the end of
                                           the partition unless '--offset' is
                                           specified.
--property <String: prop>                The properties to initialize the
                                           message formatter. Default
                                           properties include:
                                          print.timestamp=true|false
                                          print.key=true|false
                                          print.offset=true|false
                                          print.partition=true|false
                                          print.headers=true|false
                                          print.value=true|false
                                          key.separator=<key.separator>
                                          line.separator=<line.separator>
                                          headers.separator=<line.separator>
                                          null.literal=<null.literal>
                                          key.deserializer=<key.deserializer>
                                          value.deserializer=<value.
                                           deserializer>
                                          header.deserializer=<header.
                                           deserializer>
                                         Users can also pass in customized
                                           properties for their formatter; more
                                           specifically, users can pass in
                                           properties keyed with 'key.
                                           deserializer.', 'value.
                                           deserializer.' and 'headers.
                                           deserializer.' prefixes to configure
                                           their deserializers.
--skip-message-on-error                  If there is an error when processing a
                                           message, skip it instead of halt.
--timeout-ms <Integer: timeout_ms>       If specified, exit if no message is
                                           available for consumption for the
                                           specified interval.
--topic <String: topic>                  The topic to consume on.
--value-deserializer <String:
  deserializer for values>
--version                                Display Kafka version.
--whitelist <String: Java regex          DEPRECATED, use --include instead;
  (String)>                                ignored if --include specified.
                                           Regular expression specifying list
                                           of topics to include for consumption.


Use case : current message:
 ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic todos-topic

After starting consumer, you need to publsh message , using producer...
./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic todos-topic
>Hello
>Hai

 ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic todos-topic
Hello
Hai

What if i want to display all messages ? Histrical messages and current message


./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic todos-topic --from-beginning
Learn Kafka
Learn Event Driven Architecture
Learn kafka streams
Learn Kafka connectors
Hello
Hai
Welcome
.....................................................................................
				Activity

1.Create topic
2.publish event
3.Consume events
.....................................................................................
	  Before publishing event via producer should i need to create topic
...............................................................................

Yes, we need topic.

Topic creations:

1.Topic can be created using "kafka-topics.sh" tool.
   This would be good when we know the topic name in advance.
2.Topic can be created automatically by producers.
    There would be use case where the programs (publisher) can create topic.
 if you are java developer, from java you can create topic when java program act as publisher.
 
Topics are automatically created by publishers.

server.properties:
  topic configuration

auto.create.topics.enable=true
num.partitions=1
default.replication.factor=1

Note: by default this configuration is supplied

Topic creations and publish events by producer:
...............................................

./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic orders
>order placed
[2023-11-14 17:17:32,763] WARN [Producer clientId=console-producer] Error while fetching metadata with correlation id 5 : {orders=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)
>order reserved
>order pending
>order cancelled
>

Consumer
 ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic orders --from-beginning
order placed
order reserved
order pending
order cancelled
....................................................................................
				Consumer Basic properties
....................................................................................

Property options will give meta or detailed information about messages and topics

--property <String:pro>

Time Stamp Property:
...................
  It is property used to know when event was published.

--property <String: prop>                The properties to initialize the
                                           message formatter. Default
                                           properties include:
                                          print.timestamp=true|false
                                          print.key=true|false
                                          print.offset=true|false
                                          print.partition=true|false
                                          print.headers=true|false
                                          print.value=true|false
                                          key.separator=<key.separator>
                                          line.separator=<line.separator>
                                          headers.separator=<line.separator>
                                          null.literal=<null.literal>
                                          key.deserializer=<key.deserializer>
                                          value.deserializer=<value.
                                           deserializer>
                                          header.deserializer=<header.
                                           deserializer>
.....................................................................................
			 Partitions
.....................................................................................
As we discussed already, topic is just reprentation of folder and collection of files.
When you create a topic, it is created folder  "topicname-0"

if a topic were constrained to live entirely on one machine,that would place a pretty radical limit on the ability of kafka to scale.
It could manage many topics across many machines- Kafka is a distributed system, after all - but no one topic could ever get too big or asipir to accomadate too many reads and writes.

Fortunately, kafka does not leave us withouts options here, it gives us the ability to partition topics

Partitions means breaking topic into multiple folders and files.

Partition takes single topic log and breaks it into multiple logs, each of which can live on separate node in the kafka cluster.

This way , the work of storing messages, writing new messaging and processing existing messages can be splilt among many nodes in the cluster.

Every partition is just folder, Each folder has its own log file..
.....................................................................................
			  
		          payment-topic
				|
			---------------------------------------
			|       |                |
               payment-topic-0 payement-topic-1 paytment-topic-2	
                   |                |              |
              log files         log files        log files


By default every topic has single partition.
.....................................................................................
			 Creating topic with multiple partitions
.....................................................................................
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic payment --partitions 3
Created topic payment.

After creating partitions, you can see inside kafka log folder. /tmp/kafka-logs

 /tmp/kafka-logs
         |
         payment-0  - 0 is partition no
         payment-1  - 1 is partition no
         payment-2  - 2 is partition no

Describe topic with partitions
 ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic payment
Topic: payment  TopicId: OR-yFkp4RTu_dn1o64wEuw PartitionCount: 3       ReplicationFactor: 1    Configs:
        Topic: payment  Partition: 0    Leader: 0       Replicas: 0     Isr: 0
        Topic: payment  Partition: 1    Leader: 0       Replicas: 0     Isr: 0
        Topic: payment  Partition: 2    Leader: 0       Replicas: 0     Isr: 0

Why Partitions?
  Partitions helps to distribute messages into multiple log files so that we dont need to dump into one single log file, we can scale the events across multiple files.
			
                    "Partitions help unit of parallelism"
.....................................................................................
			    Segments
....................................................................................
What is segment?
  Segement is just actual log file containing "Records".
  Record is just "Message/Event". Record is term used by kafka to represent incomming message.
  In kafka data is written into file system,  data is called "record" which has some structure, that will explore soon.
 
 Segment is nothing file, called log file.

Exploring log files:

:/tmp/kafka-logs/payment-0$ ls -l
total 8
-rw-r--r-- 1 subu subu 10485760 Nov 15 14:44 00000000000000000000.index
-rw-r--r-- 1 subu subu        0 Nov 15 14:44 00000000000000000000.log
-rw-r--r-- 1 subu subu 10485756 Nov 15 14:44 00000000000000000000.timeindex
-rw-r--r-- 1 subu subu        8 Nov 15 14:44 leader-epoch-checkpoint
-rw-r--r-- 1 subu subu       43 Nov 15 14:44 partition.metadata 


Here segment is group of files

.log
.index
.timeindex

00000000000000000000 -name of the file.

This file contains messages called records.

Records are stored as "Byte Array"

00000000000000000000.log => This is the file which stores actual log messages(records)
.....................................................................................
			 Segment File or Log File Architecture
.....................................................................................
How events or data or message or record is stored into segment.

Actual Log file is structured with two parts

1.Actual data - event
2.Offset
 
As we discussed event is published into segement as "record" which is simply byte array.

offset:
  An , offset into a file is simply character location within that file, usually starting with 0; thus offset "240" is actually the 241 th byte in the file


  (Byte array)
  a  b  c  d e f g -------------------Actual Record
 ..........................
  0  1  2  3 4 5 6 ------------------>Offset

When ever you publish event into topic, into partition, and into segment event to be inserted along with offset no, which is calculated by finding last offset no and increment by 1 and insert new data with offset no.
.....................................................................................
			Partion and multple segments(logfiles)
.....................................................................................

By default every partition , will have single log file, but we can have more segements (log files).

Multiple log files inside single folder(partition)

filesNames:

partion-0
   |
  0000000000000000000000000000.log - segment-0
  0000000000000000000000000001.log - segment-1
  0000000000000000000000000002.log - segement-2

Since we have many log files, which log file can get data for write operation.

		"Active Segement"  only gets data

How many segment files we can have for a partition?

 There is no limit of "segement files".

Segments are created based on two factors:

1.Size 
2.Time

The segment size(file size) is determined by the proprty

log.segement.bytes
     The maximum size of a single log file.
     When it reaches, kafka will create new one.
     default is 1 gb

Time:
 log.segement.ms
   The Kafka will wait before creating new file based on time.
   default is 1 week.

Either one is statisfied , new log file is created.

How to represent multiple segment files and how messages are published into a active segment?

segment-0             segment-1       Segment-2
offset o to 1006     1007 to 2000     2001 to ongoing		 
.....................................................................................

Lab:
 Multiple segement files (log files)

server.properties.

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
#log.segment.bytes=1073741824

Steps:
1.configure the server.properites
log.segment.bytes=1000
2.publish messages until it reaches 1000 bytes
3.look into kafka log file location.

publish events 
/bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic sales
>2323ljjlskjlkdjfa;lkfjdsalkfasjf
>asdfasdf
>adsfasfasfas
>adfasdfasfdasf
>afasfasfsaf
>dfldskfsa;lfjsadlkfjsadflkasdfj
>lasdkjfa;lkdsfja;dslkfjads;lkfjsafl;k
>l;akdjflaskfjas;lkfjsa
>;ladkjfa;lksfjsad;lfkdsajf
>;lakjdsf;laskjfsa;lfkj
>rsfsdfsdlkfjdslkfdsjf
>;lkajdflksajfsa
>f;aldskfjas;lkfjdsaf
>;lakdjf;alkfja;dlfkjsa
>l;adjfa;lskfjsa;lfkjdsaf


sales-0$ ls -l
total 24
-rw-r--r-- 1 subu subu        0 Nov 15 16:25 00000000000000000000.index
-rw-r--r-- 1 subu subu      984 Nov 15 16:25 00000000000000000000.log
-rw-r--r-- 1 subu subu       12 Nov 15 16:25 00000000000000000000.timeindex
-rw-r--r-- 1 subu subu 10485760 Nov 15 16:25 00000000000000000011.index
-rw-r--r-- 1 subu subu      353 Nov 15 16:25 00000000000000000011.log
-rw-r--r-- 1 subu subu       56 Nov 15 16:25 00000000000000000011.snapshot
-rw-r--r-- 1 subu subu 10485756 Nov 15 16:25 00000000000000000011.timeindex
-rw-r--r-- 1 subu subu        8 Nov 15 16:23 leader-epoch-checkpoint
-rw-r--r-- 1 subu subu       43 Nov 15 16:23 partition.metadata

Your task:
 Try with  log.segement.ms
.....................................................................................
			How to inspect the internals of log file
				 (Dump log)
.....................................................................................

Some times when you are working with Kafka, you many find yourself needing to manually inspect underlying logs of a topics.

Whether you are just curious about kafka internals, or you need to debug an issue and verify the content, the kafka-dump-log command is your friend.


kafka-dump.log.sh

Lab:
 Verify the internal structure of "Segment" file.

$ ./bin/kafka-dump-log.sh --print-data-log --files /../tmp/kafka-logs/sales-0/00000000000000000000.log
Dumping /../tmp/kafka-logs/sales-0/00000000000000000000.log
Log starting offset: 0
baseOffset: 0 lastOffset: 0 count: 1 baseSequence: 0 lastSequence: 0 producerId: 2000 producerEpoch: 0 partitionLeaderEpoch: 0 isTransactional: false isControl: false deleteHorizonMs: OptionalLong.empty position: 0 CreateTime: 1700045725504 size: 100 magic: 2 compresscodec: none crc: 2082850056 isvalid: true
| offset: 0 CreateTime: 1700045725504 keySize: -1 valueSize: 32 sequence: 0 headerKeys: [] payload: 2323ljjlskjlkdjfa;lkfjdsalkfasjf
baseOffset: 1 lastOffset: 1 count: 1 baseSequence: 1 lastSequence: 1 producerId: 2000 producerEpoch: 0 partitionLeaderEpoch: 0 isTransactional: false isControl: false deleteHorizonMs: OptionalLong.empty position: 100 CreateTime: 1700045726634 size: 76 magic: 2 compresscodec: none crc: 4005214925 isvalid: true
| offset: 1 CreateTime: 1700045726634 keySize: -1 valueSize: 8 sequence: 1 headerKeys: [] payload: asdfasdf
baseOffset: 2 lastOffset: 2 count: 1 baseSequence: 2 lastSequence: 2 producerId: 2000 producerEpoch: 0 partitionLeaderEpoch: 0 isTransactional: false isControl: false deleteHorizonMs: OptionalLong.empty position: 176 CreateTime: 1700045727906 size: 80 magic: 2 compresscodec: none crc: 1139443005 isvalid: true


./bin/kafka-dump-log.sh --print-data-log --files /../tmp/kafka-logs/sales-0/00000000000000000011.log
Dumping /../tmp/kafka-logs/sales-0/00000000000000000011.log
Log starting offset: 11
baseOffset: 11 lastOffset: 11 count: 1 baseSequence: 11 lastSequence: 11 producerId: 2000 producerEpoch: 0 partitionLeaderEpoch: 0 isTransactional: false isControl: false deleteHorizonMs: OptionalLong.empty position: 0 CreateTime: 1700045747438 size: 83 magic: 2 compresscodec: none crc: 4285636970 isvalid: true

....................................................................................
			   index files
....................................................................................

.index
   Contains the mappings of "offset" to its position in ".log" file
.timeindex
   file contains the mappings of "Timestamp" to message offset.

Records(messages or events) are searched by consumers based these index files only.

....................................................................................
			 Consumers and offsets
...................................................................................

Consumers can read records from the "segement" based on offset only.

Consumers can read records

1.from the begining - -0th offset
2.from the active position - from the current offset
3.based on explicit offset no.

Note:
 if you read record based on offset,you must supply partition option.

 ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic orders --offset 2
--partition 0
order pending
order cancelled
^CProcessed a total of 2 messages
.....................................................................................
		  Records(Events/Messages) distributions and partitions
....................................................................................

Topics are broken into partitions, partitions are broken into segements.

As a Producer, we send data to the topic only,Topic only distributes messages among partitions.


Partitioner:
  Partitioner is a process/algorthim that will determine to which partition  a particular message/event/record will be assigned.

	"In Nutshell Partitioner is simple java progra/class Having 
		Routing algorthim"
		 
                "That algorthim only decides where to go"
		 
For eg, i have a topic , having 3 partitions

Record----->publish------Partitioner------Where to go ---PO or P1 or P2

Record contains information for how to select partition...


Partitioner Algorthims:
......................

1.Round Robin
2.Stick Partitioner 
3.Key based Partitioner

1.Round Robin:
..............
  It is default algorthim used in kafka older versions less than 2.3

Lets assume i have two partitions

M1--->P1
M2---->P2
M3--->P1
M4--->P2

In round robin, messages are distributed equally to all partitions.

Drawbacks of Round robin:

Lets assume that , you have sensor device which is polling events every ms , kafka receives that event via network ,and stores into partitions.

if you do so, if more messages and more partitions, it creates the highest latency and low performance.

After 2.3 kafka introduced new concept called "Batching"
........................................................
instead of sending every record over network, we can accumulate records , make it as batch.

2.Sticky Partitioner Algorthim:
...............................
=>It is built on the top of Round robin only.
=>Sticky partitioner wont send a single record/event/message rather it send as a batch.
=>It improves the performance,reduces network latency.
=>This is default partitioner in the latest kakfa

Sticky = {Round Robin + Batching}

3.Key based partitioner Alogorthim.

Before deep divide , we need to understand, Message structure.

In Kafka Messages(Records/Events) are organized based on "key-value" pair.

Can we know that record has key?
Yes

Lab:
 How to print key of Record...

./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic orders --from-beginning --property print.key=true
null    order placed
null    order reserved
null    order pending
null    order cancelled

--property print.key=true which prints key  and value.

Here order placed is value
null is key.

By default message/event has key whether you are giving or not, if you dont give any key then key would be "null".

              if any message/event/record is distributed with null key , then
			 "Sticky partitioner would be used".

Lab: Knowing how stickpartiionare are used
 Create topic with 2 partitions
 Distribute message with 'null' key - without key
 watch in consumer side keys and partitions.

/bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic product  2
--partitions 2
Created topic product.

Start two command prompt for producer:
 ./bin/kafka-console-producer.sh --bootstrap-server  localhost:9092 --topic product
 ./bin/kafka-console-producer.sh --bootstrap-server  localhost:9092 --topic product

Start  consumer:
/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic product  --from-beginning --property print.key=true --property print.partition=true
Partition:1     null    phone
Partition:1     null    book
Partition:1     null    kd;fjlkdsafjsa
Partition:0     null    hello
Partition:0     null    computer
Partition:1     null    food
Partition:0     null    test
Partition:1     null    heee
Partition:1     null    kjflakdsf
Partition:0     null    hess
.....................................................................................
			 Key based Distribution
.....................................................................................
We can supply key, based on key messages/events can be distributed.

How key-value pair messages are distributed among partions?

Kafka uses an alogrthim called "key Hashing algorthim".

Key hashing is the process of determing the mapping of a key to a partition in the default partitioner.

The keys are hashed based on an alogorthim called "murmur2"
 
  TargetPartition= Math.abs(Util.murmur2(keyInBytes) % (numofPartitions-1)

Note:
 if you have same key, but different values, the same partition will be used

Lab:
=>create topic with 2 partions
=>Publish message with key
=>Consume message...

 ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic user  2 --p
artitions 2
Created topic user.

./bin/kafka-console-producer.sh --bootstrap-server  localhost:9092 --topic user --property "key.separator=:" --property "parse.key=true"
>1:subramanian
>2:ram
>3:karthik
>abc:foo
>78:bar
>45:89

Consumer:
./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic user  --fr
om-beginning --property print.key=true --property print.partition=true

Partition:1     1       subramanian
Partition:0     2       ram
Partition:1     3       karthik
Partition:1     abc     foo
Partition:1     78      bar
Partition:0     45      89
.....................................................................................
			   Kafka Log Rentention and Cleanup Policies
...................................................................................

What is log rention?
	The policy can be set to delete segments after a period of time, or after a given size has accumulated.
	A segment will be deleted whenever *either* of these criteria are met. Deletion always happens from the end of the log.

The following configurations control the disposal of log segments.


# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168
log.retention.minutes=10
log.retention.ms=1000

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

if you mention this policy in server.properties, it is applied for all log files.....
.....................................................................................
				
Deletion policy set  for entire broker - server.properties.
Delete policy can be set for particular topic - during topic creation you can supply that property.

Lab:
 Create topic with Retension policy.

Topic creation:
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic hello --config retention.ms=20000

Start publishing and consuming:


 ./bin/kafka-console-producer.sh --bootstrap-server  localhost:9092 --topic hello
>Hello
>hai
>welcome
>how are you
>test
>h
>jadf
>klsdlfkjsadfl
>klasdjflkdsafjadsfk
>lkasdjfslkdfjsadkfjsadf;klsajfsa;lkfjsa
>sdfsadfsadf
>adsfasdfasdf
>adfadsfasdf
>adsfdsfadsf

./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic hello  --f
rom-beginning --property print.key=true --property print.partition=true
Partition:0     null    Hello
Partition:0     null    hai
Partition:0     null    welcome
Partition:0     null    how are you
Partition:0     null    test
Partition:0     null    h
Partition:0     null    jadf
Partition:0     null    klsdlfkjsadfl
Partition:0     null    klasdjflkdsafjadsfk
Partition:0     null    lkasdjfslkdfjsadkfjsadf;klsajfsa;lkfjsa
Partition:0     null    sdfsadfsadf
Partition:0     null    adsfasdfasdf
Partition:0     null    adfadsfasdf
Partition:0     null    adsfdsfadsf

After 2mins you can watch that file getting deleted and new logfile is beging created.

Server log which shows how , log entry is getting deleted.
..........................................................

kafka.storage.internals.log.ProducerStateManager)
[2023-11-16 15:26:10,021] INFO [UnifiedLog partition=hello-0, dir=/tmp/kafka-logs] Deleting segment LogSegment(baseOffset=0, size=1103, lastModifiedTime=1700128531602, largestRecordTimestamp=Some(1700128530607)) due to log retention time 20000ms breach based on the largest record timestamp in the segment (kafka.log.UnifiedLog)
[2023-11-16 15:26:10,023] INFO [UnifiedLog partition=hello-0, dir=/tmp/kafka-logs] Incremented log start offset to 14 due to segment deletion (kafka.log.UnifiedLog)
[2023-11-16 15:27:10,022] INFO [LocalLog partition=hello-0, dir=/tmp/kafka-logs] Deleting segment files LogSegment(baseOffset=0, size=1103, lastModifiedTime=1700128531602, largestRecordTimestamp=Some(1700128530607)) (kafka.log.LocalLog$)
[2023-11-16 15:27:10,024] INFO Deleted log /tmp/kafka-logs/hello-0/00000000000000000000.log.deleted. (kafka.log.LogSegment)
[2023-11-16 15:27:10,026] INFO Deleted offset index /tmp/kafka-logs/hello-0/00000000000000000000.index.deleted. (kafka.log.LogSegment)
[2023-11-16 15:27:10,026] INFO Deleted time index /tmp/kafka-logs/hello-0/00000000000000000000.timeindex.deleted. (kafka.log.LogSegment)
[2023-11-16 15:27:24,352] INFO [GroupCoordinator 0]: Preparing to rebalance group console-consumer-55082 in state PreparingRebalance with old generating.
....................................................................................
				Kafka runtime configurations
.....................................................................................

Once the topic is created,later if we want to apply dynamic configurations without server restart eg , setting new retension policy for a topic.

kafka-config.sh utility can be used for dynamic configuration.

entity:
 It is object which represents topic,user, client,broker etc...
if you want to change any configuration for entity this command can be used.

entity-type =broker,topic,user

Broker Level Configuration eg:

//adding or editing existing broker configuration.

./bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --entity-type brokers entity-default --add-config min.insync.replicas=2

In java
 KafkaConfig config=new KafkaConfig()
 config.setProperty('min.insync.replicas')

if you delete:

./bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --entity-type brokers entity-default --delete-config min.insync.replicas=2


Topics:
./bin/kafka-configs.sh --bootstrap-server localhost:9092 
     --alter --entity-type topics --entity-name test --add-config max.message.bytes=1000

Lab:
 Alter topic with Rention policy:

Steps:

1.create topic with default settings

./bin/kafka-topics.sh --bootstrp-server localhost:9092 --create --topic greet
Created topic greet.

2.Describe topic.
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic greet
Topic: greet    TopicId: YkRC3sYIS0SOfbnJc-ymog PartitionCount: 1       ReplicationFactor: 1    
Configs:
Topic: greet    Partition: 0    Leader: 0       Replicas: 0     Isr: 0


2.Alter topic configuration like retention policy.
 ./bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --entity-type topics --entity-name greet --add-config retention.ms=20000

3.subu@LAPTOP-R2TGGFDL:~/kafka_2.12-3.6.0$ ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic greet

Topic: greet    TopicId: YkRC3sYIS0SOfbnJc-ymog PartitionCount: 1       ReplicationFactor: 1    Configs: retention.ms=20000
        Topic: greet    Partition: 0    Leader: 0       Replicas: 0     Isr: 0





















































































 

















  























































